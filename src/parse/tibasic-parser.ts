import * as types from '../common/types'
import * as util from './pegutil'

// Generated by peggy v. 2.0.1 (ts-pegjs plugin v. 2.1.0 )
//
// https://peggyjs.org/   https://github.com/metadevpro/ts-pegjs

"use strict";

export interface IFilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface IFileRange {
  start: IFilePosition;
  end: IFilePosition;
  source: string;
}

export interface ILiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface IClassParts extends Array<string | IClassParts> {}

export interface IClassExpectation {
  type: "class";
  parts: IClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface IAnyExpectation {
  type: "any";
}

export interface IEndExpectation {
  type: "end";
}

export interface IOtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = ILiteralExpectation | IClassExpectation | IAnyExpectation | IEndExpectation | IOtherExpectation;

function peg$padEnd(str: string, targetLength: number, padString: string) {
  padString = padString || ' ';
  if (str.length > targetLength) {
    return str;
  }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

export class SyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case "literal":
          return "\"" + literalEscape(expectation.text) + "\"";
        case "class":
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) + "-" + classEscape(part[1] as string)
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        case "any":
          return "any character";
        case "end":
          return "end of input";
        case "other":
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }

  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: IFileRange;
  public name: string;

  constructor(message: string, expected: Expectation[], found: string | null, location: IFileRange) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof (Object as any).setPrototypeOf === "function") {
      (Object as any).setPrototypeOf(this, SyntaxError.prototype);
    } else {
      (this as any).__proto__ = SyntaxError.prototype;
    }
    if (typeof (Error as any).captureStackTrace === "function") {
      (Error as any).captureStackTrace(this, SyntaxError);
    }
  }

  format(sources: { source: string; text: string }[]): string {
    let str = 'Error: ' + this.message;
    if (this.location) {
      let src: string[] | null = null;
      let k;
      for (k = 0; k < sources.length; k++) {
        if (sources[k].source === this.location.source) {
          src = sources[k].text.split(/\r\n|\n|\r/g);
          break;
        }
      }
      let s = this.location.start;
      let loc = this.location.source + ':' + s.line + ':' + s.column;
      if (src) {
        let e = this.location.end;
        let filler = peg$padEnd('', s.line.toString().length, ' ');
        let line = src[s.line - 1];
        let last = s.line === e.line ? e.column : line.length + 1;
        str += '\n --> ' + loc + '\n' + filler + ' |\n' + s.line + ' | ' + line + '\n' + filler + ' | ' +
          peg$padEnd('', s.column - 1, ' ') +
          peg$padEnd('', last - s.column, '^');
      } else {
        str += '\n at ' + loc;
      }
    }
    return str;
  }
}

function peg$parse(input: string, options?: IParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<any> = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions: {[id: string]: any} = { Start: peg$parseStart };
  let peg$startRuleFunction: () => any = peg$parseStart;

  const peg$c0 = peg$anyExpectation();
  const peg$c1 = /^[A-Z]/;
  const peg$c2 = peg$classExpectation([["A", "Z"]], false, false);
  const peg$c3 = /^[A-Z0-9]/;
  const peg$c4 = peg$classExpectation([["A", "Z"], ["0", "9"]], false, false);
  const peg$c5 = /^[0-9]/;
  const peg$c6 = peg$classExpectation([["0", "9"]], false, false);
  const peg$c7 = function(): any { return true };
  const peg$c8 = ")";
  const peg$c9 = peg$literalExpectation(")", false);
  const peg$c10 = function(): any { return text(); };
  const peg$c11 = "&theta";
  const peg$c12 = peg$literalExpectation("&theta", false);
  const peg$c13 = function(): any { return 'THETA' };
  const peg$c14 = "Str";
  const peg$c15 = peg$literalExpectation("Str", false);
  const peg$c16 = "&L";
  const peg$c17 = peg$literalExpectation("&L", false);
  const peg$c18 = /^[1-6]/;
  const peg$c19 = peg$classExpectation([["1", "6"]], false, false);
  const peg$c20 = function(number: any): any { return types.ListVariablePrefix + number; };
  const peg$c21 = "&list";
  const peg$c22 = peg$literalExpectation("&list", false);
  const peg$c23 = function(prefix: any): any { return types.ListVariablePrefix + text().substring(prefix.length); };
  const peg$c24 = function(name: any): any { 
      const x: types.NumericVariable = { type: types.VARIABLE, name2: name } 
      return x
    };
  const peg$c25 = function(name: any): any { return { type: types.STRINGVARIABLE, name } };
  const peg$c26 = function(name: any): any { return { type: types.LISTVARIABLE, name, custom: false } };
  const peg$c27 = function(name: any): any { return { type: types.LISTVARIABLE, name, custom: true } };
  const peg$c28 = "(";
  const peg$c29 = peg$literalExpectation("(", false);
  const peg$c30 = function(list: any, index: any): any { return { type: types.LISTINDEX, list, index } };
  const peg$c31 = /^[+\-]/;
  const peg$c32 = peg$classExpectation(["+", "-"], false, false);
  const peg$c33 = "&E";
  const peg$c34 = peg$literalExpectation("&E", false);
  const peg$c35 = ".";
  const peg$c36 = peg$literalExpectation(".", false);
  const peg$c37 = function(integer: any, fraction: any, exponent: any): any { 
      return { type: types.NUMBER, integer, fraction, exponent }
    };
  const peg$c38 = function(fraction: any, exponent: any): any { 
      return { type: types.NUMBER, fraction, exponent }
    };
  const peg$c39 = function(integer: any, exponent: any): any { 
      return { type: types.NUMBER, integer, exponent }
    };
  const peg$c40 = /^[^"]/;
  const peg$c41 = peg$classExpectation(["\""], true, false);
  const peg$c42 = "\"";
  const peg$c43 = peg$literalExpectation("\"", false);
  const peg$c44 = function(chars: any): any { return { type: types.STRING, chars } };
  const peg$c45 = "Ans";
  const peg$c46 = peg$literalExpectation("Ans", false);
  const peg$c47 = function(): any { return { type: types.ANS } };
  const peg$c48 = "getKey";
  const peg$c49 = peg$literalExpectation("getKey", false);
  const peg$c50 = function(): any { return { type: types.GetKey } };
  const peg$c51 = "{";
  const peg$c52 = peg$literalExpectation("{", false);
  const peg$c53 = "}";
  const peg$c54 = peg$literalExpectation("}", false);
  const peg$c55 = function(head: any, tail: any): any { return util.buildList(head, tail); };
  const peg$c56 = "&-";
  const peg$c57 = peg$literalExpectation("&-", false);
  const peg$c58 = function(operator: any, argument: any): any { return { type: types.UNARY, operator, argument } };
  const peg$c59 = function(head: any, tail: any, end: any): any { return util.buildImplicitBinaryExpression(head, tail, end); };
  const peg$c60 = "*";
  const peg$c61 = peg$literalExpectation("*", false);
  const peg$c62 = "/";
  const peg$c63 = peg$literalExpectation("/", false);
  const peg$c64 = function(head: any, tail: any): any { return util.buildBinaryExpression(head, tail); };
  const peg$c65 = "+";
  const peg$c66 = peg$literalExpectation("+", false);
  const peg$c67 = "-";
  const peg$c68 = peg$literalExpectation("-", false);
  const peg$c69 = "=";
  const peg$c70 = peg$literalExpectation("=", false);
  const peg$c71 = "!=";
  const peg$c72 = peg$literalExpectation("!=", false);
  const peg$c73 = ">=";
  const peg$c74 = peg$literalExpectation(">=", false);
  const peg$c75 = ">";
  const peg$c76 = peg$literalExpectation(">", false);
  const peg$c77 = "<=";
  const peg$c78 = peg$literalExpectation("<=", false);
  const peg$c79 = "<";
  const peg$c80 = peg$literalExpectation("<", false);
  const peg$c81 = " and ";
  const peg$c82 = peg$literalExpectation(" and ", false);
  const peg$c83 = " or ";
  const peg$c84 = peg$literalExpectation(" or ", false);
  const peg$c85 = " xor ";
  const peg$c86 = peg$literalExpectation(" xor ", false);
  const peg$c87 = ",";
  const peg$c88 = peg$literalExpectation(",", false);
  const peg$c89 = function(): any { return { type: types.EmptyStatement } };
  const peg$c90 = function(value: any): any { return { type: types.ValueStatement, value }};
  const peg$c91 = "->";
  const peg$c92 = peg$literalExpectation("->", false);
  const peg$c93 = function(value: any, assignable: any): any { return { type: types.AssignmentStatement, value, assignable }};
  const peg$c94 = "If ";
  const peg$c95 = peg$literalExpectation("If ", false);
  const peg$c96 = function(value: any, extra: any): any { return { type: types.IfStatement, value, extra }};
  const peg$c97 = "Then";
  const peg$c98 = peg$literalExpectation("Then", false);
  const peg$c99 = function(extra: any): any { return { type: types.ThenStatement, extra }};
  const peg$c100 = "Else";
  const peg$c101 = peg$literalExpectation("Else", false);
  const peg$c102 = function(extra: any): any { return { type: types.ElseStatement, extra }};
  const peg$c103 = "For(";
  const peg$c104 = peg$literalExpectation("For(", false);
  const peg$c105 = function(variable: any, start: any, end: any, step: any, args: any, extra: any): any { return { type: types.ForLoop, variable, start, end, step, args, extra }};
  const peg$c106 = "While ";
  const peg$c107 = peg$literalExpectation("While ", false);
  const peg$c108 = function(value: any, extra: any): any { return { type: types.WhileLoop, value, extra }};
  const peg$c109 = "Repeat ";
  const peg$c110 = peg$literalExpectation("Repeat ", false);
  const peg$c111 = function(value: any, extra: any): any { return { type: types.RepeatLoop, value, extra }};
  const peg$c112 = "End";
  const peg$c113 = peg$literalExpectation("End", false);
  const peg$c114 = function(extra: any): any { return { type: types.EndStatement, extra }};
  const peg$c115 = "Pause";
  const peg$c116 = peg$literalExpectation("Pause", false);
  const peg$c117 = function(): any { return { type: types.PauseStatement }};
  const peg$c118 = "Lbl ";
  const peg$c119 = peg$literalExpectation("Lbl ", false);
  const peg$c120 = function(location: any): any { return { type: types.LabelStatement, location }};
  const peg$c121 = "Goto ";
  const peg$c122 = peg$literalExpectation("Goto ", false);
  const peg$c123 = function(location: any): any { return { type: types.GotoStatement, location }};
  const peg$c124 = "IS>(";
  const peg$c125 = peg$literalExpectation("IS>(", false);
  const peg$c126 = function(variable: any, end: any): any { return { type: types.IncrementSkip, variable, end }};
  const peg$c127 = "DS<(";
  const peg$c128 = peg$literalExpectation("DS<(", false);
  const peg$c129 = function(variable: any, end: any): any { return { type: types.DecrementSkip, variable, end }};
  const peg$c130 = "Menu(";
  const peg$c131 = peg$literalExpectation("Menu(", false);
  const peg$c132 = function(title: any, options: any): any { return util.buildMenuStatement(title, options); };
  const peg$c133 = "prgm";
  const peg$c134 = peg$literalExpectation("prgm", false);
  const peg$c135 = function(name: any): any { return { type: types.ProgramStatement, name }};
  const peg$c136 = "Return";
  const peg$c137 = peg$literalExpectation("Return", false);
  const peg$c138 = function(): any { return { type: types.ReturnStatement }};
  const peg$c139 = "Stop";
  const peg$c140 = peg$literalExpectation("Stop", false);
  const peg$c141 = function(): any { return { type: types.StopStatement }};
  const peg$c142 = "DelVar ";
  const peg$c143 = peg$literalExpectation("DelVar ", false);
  const peg$c144 = function(variable: any): any { return { type: types.DelVarStatement, variable }};
  const peg$c145 = "GraphStyle(";
  const peg$c146 = peg$literalExpectation("GraphStyle(", false);
  const peg$c147 = function(equation: any, style: any): any { return { type: types.GraphStyleStatement, equation, style }};
  const peg$c148 = "OpenLib(";
  const peg$c149 = peg$literalExpectation("OpenLib(", false);
  const peg$c150 = function(name: any): any { return { type: types.OpenLibStatement, name }};
  const peg$c151 = "ExecLib(";
  const peg$c152 = peg$literalExpectation("ExecLib(", false);
  const peg$c153 = function(name: any): any { return { type: types.ExecLibStatement, name }};
  const peg$c154 = "Input ";
  const peg$c155 = peg$literalExpectation("Input ", false);
  const peg$c156 = function(text: any, variable: any): any { return { type: types.Input, text, variable } };
  const peg$c157 = "Prompt ";
  const peg$c158 = peg$literalExpectation("Prompt ", false);
  const peg$c159 = function(variable: any): any { return { type: types.Prompt, variable } };
  const peg$c160 = "Disp ";
  const peg$c161 = peg$literalExpectation("Disp ", false);
  const peg$c162 = function(value: any): any { return { type: types.Display, value } };
  const peg$c163 = "DispGraph";
  const peg$c164 = peg$literalExpectation("DispGraph", false);
  const peg$c165 = function(): any { return { type: types.DispGraph } };
  const peg$c166 = "DispTable";
  const peg$c167 = peg$literalExpectation("DispTable", false);
  const peg$c168 = function(): any { return { type: types.DispTable } };
  const peg$c169 = "Output(";
  const peg$c170 = peg$literalExpectation("Output(", false);
  const peg$c171 = function(row: any, column: any, value: any): any { return { type: types.Output, row, column, value } };
  const peg$c172 = "ClrHome";
  const peg$c173 = peg$literalExpectation("ClrHome", false);
  const peg$c174 = function(): any { return { type: types.ClrHome } };
  const peg$c175 = "ClrTable";
  const peg$c176 = peg$literalExpectation("ClrTable", false);
  const peg$c177 = function(): any { return { type: types.ClrTable } };
  const peg$c178 = "GetCalc(";
  const peg$c179 = peg$literalExpectation("GetCalc(", false);
  const peg$c180 = function(variable: any, portflag: any): any { return { type: types.GetCalc, variable, portflag } };
  const peg$c181 = "Get(";
  const peg$c182 = peg$literalExpectation("Get(", false);
  const peg$c183 = function(variable: any): any { return { type: types.Get, variable } };
  const peg$c184 = "Send(";
  const peg$c185 = peg$literalExpectation("Send(", false);
  const peg$c186 = function(variable: any): any { return { type: types.Send, variable } };

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): IFileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1
    );
  }

  function error(message: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(text1: string, ignoreCase: boolean): ILiteralExpectation {
    return { type: "literal", text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts: IClassParts, inverted: boolean, ignoreCase: boolean): IClassExpectation {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation(): IAnyExpectation {
    return { type: "any" };
  }

  function peg$endExpectation(): IEndExpectation {
    return { type: "end" };
  }

  function peg$otherExpectation(description: string): IOtherExpectation {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): IFileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: IFileRange) {
    return new SyntaxError(message, [], "", location1);
  }

  function peg$buildStructuredError(expected1: Expectation[], found: string | null, location1: IFileRange) {
    return new SyntaxError(
      SyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1
    );
  }

  function peg$parseStart(): any {
    let s0;

    s0 = peg$parseStatement();

    return s0;
  }

  function peg$parseSourceCharacter(): any {
    let s0;

    if (input.length > peg$currPos) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c0); }
    }

    return s0;
  }

  function peg$parseAlpha(): any {
    let s0;

    if (peg$c1.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }

    return s0;
  }

  function peg$parseAlphaNum(): any {
    let s0;

    if (peg$c3.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c4); }
    }

    return s0;
  }

  function peg$parseDigit(): any {
    let s0;

    if (peg$c5.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }

    return s0;
  }

  function peg$parseExtraCharacters(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseSourceCharacter();
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseSourceCharacter();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOptionalEndParen(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 41) {
      s0 = peg$c8;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s0 as any === peg$FAILED) {
      s0 = null;
    }

    return s0;
  }

  function peg$parseLocation(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseAlphaNum();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseAlphaNum();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c10();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseProgramName(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseAlpha();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseAlphaNum();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseAlphaNum();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseAlphaNum();
          if (s4 as any === peg$FAILED) {
            s4 = null;
          }
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseAlphaNum();
            if (s5 as any === peg$FAILED) {
              s5 = null;
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parseAlphaNum();
              if (s6 as any === peg$FAILED) {
                s6 = null;
              }
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseAlphaNum();
                if (s7 as any === peg$FAILED) {
                  s7 = null;
                }
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parseAlphaNum();
                  if (s8 as any === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 as any !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c10();
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumericVariableIdentifier(): any {
    let s0, s1;

    s0 = peg$parseAlpha();
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c11) {
        s1 = peg$c11;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s1 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseStringVariableIdentifier(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c14) {
      s1 = peg$c14;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c15); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseDigit();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c10();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseListVariableIdentifier(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c17); }
    }
    if (s1 as any !== peg$FAILED) {
      if (peg$c18.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCustomListVariableIdentifier(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c21) {
      s1 = peg$c21;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c22); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseAlpha();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseAlphaNum();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseAlphaNum();
          if (s4 as any === peg$FAILED) {
            s4 = null;
          }
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseAlphaNum();
            if (s5 as any === peg$FAILED) {
              s5 = null;
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parseAlphaNum();
              if (s6 as any === peg$FAILED) {
                s6 = null;
              }
              if (s6 as any !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c23(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumericVariable(): types.NumericVariable {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseNumericVariableIdentifier();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c24(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseStringVariable(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseStringVariableIdentifier();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c25(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseListVariable(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseListVariableIdentifier();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c26(s1);
    }
    s0 = s1;
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCustomListVariableIdentifier();
      if (s1 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c27(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseVariable(): any {
    let s0;

    s0 = peg$parseStringVariable();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseNumericVariable();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseListVariable();
      }
    }

    return s0;
  }

  function peg$parseListIndex(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseListVariable();
    if (s1 as any !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c28;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseValueExpression();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseOptionalEndParen();
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c30(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAssignable(): any {
    let s0;

    s0 = peg$parseListIndex();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseVariable();
    }

    return s0;
  }

  function peg$parseInteger(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseDigit();
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseDigit();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseSignedInteger(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (peg$c31.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c32); }
    }
    if (s2 as any === peg$FAILED) {
      s2 = null;
    }
    if (s2 as any !== peg$FAILED) {
      s3 = peg$parseInteger();
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseExponentIndicator(): any {
    let s0;

    if (input.substr(peg$currPos, 2) === peg$c33) {
      s0 = peg$c33;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c34); }
    }

    return s0;
  }

  function peg$parseExponentPart(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseExponentIndicator();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseSignedInteger();
      if (s3 as any !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 as any !== peg$FAILED) {
        s0 = s2;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumericLiteral(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseInteger();
    if (s1 as any !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c35;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c36); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseInteger();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseExponentPart();
          if (s4 as any === peg$FAILED) {
            s4 = null;
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c37(s1, s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c35;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c36); }
      }
      if (s1 as any !== peg$FAILED) {
        s2 = peg$parseInteger();
        if (s2 as any !== peg$FAILED) {
          s3 = peg$parseExponentPart();
          if (s3 as any === peg$FAILED) {
            s3 = null;
          }
          if (s3 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c38(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 as any === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseInteger();
        if (s1 as any !== peg$FAILED) {
          s2 = peg$parseExponentPart();
          if (s2 as any === peg$FAILED) {
            s2 = null;
          }
          if (s2 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c39(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseCharacter(): any {
    let s0;

    if (peg$c40.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c41); }
    }

    return s0;
  }

  function peg$parseCharacterString(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseCharacter();
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseCharacter();
    }
    if (s1 as any !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseStringLiteral(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c42;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c43); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseCharacterString();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c42;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c43); }
        }
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c44(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAnswer(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c45) {
      s1 = peg$c45;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c47();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseGetKey(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c48) {
      s1 = peg$c48;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c49); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c50();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseToken(): any {
    let s0;

    s0 = peg$parseAnswer();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseGetKey();
    }

    return s0;
  }

  function peg$parseTokenLiteral(): any {
    let s0;

    s0 = peg$parseToken();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseAssignable();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseStringLiteral();
      }
    }

    return s0;
  }

  function peg$parseListExpression(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c51;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c52); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseValueExpression();
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseArgumentExpression();
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseArgumentExpression();
        }
        if (s3 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s4 = peg$c53;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c54); }
          }
          if (s4 as any === peg$FAILED) {
            s4 = null;
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c55(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTokenExpression(): any {
    let s0, s1, s2, s3;

    s0 = peg$parseTokenLiteral();
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c28;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s1 as any !== peg$FAILED) {
        s2 = peg$parseValueExpression();
        if (s2 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c8;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c9); }
          }
          if (s3 as any !== peg$FAILED) {
            s0 = s2;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseListExpression();
      }
    }

    return s0;
  }

  function peg$parseUnaryOperator(): any {
    let s0;

    if (input.substr(peg$currPos, 2) === peg$c56) {
      s0 = peg$c56;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c57); }
    }

    return s0;
  }

  function peg$parseTokenUnaryExpression(): any {
    let s0, s1, s2;

    s0 = peg$parseTokenExpression();
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseUnaryOperator();
      if (s1 as any !== peg$FAILED) {
        s2 = peg$parseTokenUnaryExpression();
        if (s2 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c58(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseUnaryExpression(): any {
    let s0, s1, s2;

    s0 = peg$parseTokenUnaryExpression();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseNumericLiteral();
      if (s0 as any === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseUnaryOperator();
        if (s1 as any !== peg$FAILED) {
          s2 = peg$parseUnaryExpression();
          if (s2 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c58(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseImplicitMultiplicativeExpression(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseTokenUnaryExpression();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseUnaryExpression();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseTokenUnaryExpression();
        if (s5 as any !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseUnaryExpression();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseTokenUnaryExpression();
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseUnaryExpression();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c59(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseUnaryExpression();
      if (s1 as any !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseTokenUnaryExpression();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseUnaryExpression();
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 as any !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseTokenUnaryExpression();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseUnaryExpression();
            if (s5 as any !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 as any !== peg$FAILED) {
          s3 = peg$parseTokenUnaryExpression();
          if (s3 as any === peg$FAILED) {
            s3 = null;
          }
          if (s3 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c59(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseUnaryExpression();
      }
    }

    return s0;
  }

  function peg$parseMultiplicativeOperator(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 42) {
      s0 = peg$c60;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c61); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s0 = peg$c62;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }
    }

    return s0;
  }

  function peg$parseMultiplicativeExpression(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseImplicitMultiplicativeExpression();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseMultiplicativeOperator();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseImplicitMultiplicativeExpression();
        if (s5 as any !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseMultiplicativeOperator();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseImplicitMultiplicativeExpression();
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c64(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAdditiveOperator(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c65;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c66); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c67;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
    }

    return s0;
  }

  function peg$parseAdditiveExpression(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseMultiplicativeExpression();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseAdditiveOperator();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseMultiplicativeExpression();
        if (s5 as any !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseAdditiveOperator();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseMultiplicativeExpression();
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c64(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTestOperator(): any {
    let s0;

    if (input.charCodeAt(peg$currPos) === 61) {
      s0 = peg$c69;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c70); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c71) {
        s0 = peg$c71;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s0 as any === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c73) {
          s0 = peg$c73;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c74); }
        }
        if (s0 as any === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s0 = peg$c75;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c76); }
          }
          if (s0 as any === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c77) {
              s0 = peg$c77;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c78); }
            }
            if (s0 as any === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 60) {
                s0 = peg$c79;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c80); }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseTestExpression(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseAdditiveExpression();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseTestOperator();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseAdditiveExpression();
        if (s5 as any !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseTestOperator();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseAdditiveExpression();
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c64(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLogicalOperator(): any {
    let s0;

    if (input.substr(peg$currPos, 5) === peg$c81) {
      s0 = peg$c81;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c82); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c83) {
        s0 = peg$c83;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c84); }
      }
      if (s0 as any === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c85) {
          s0 = peg$c85;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c86); }
        }
      }
    }

    return s0;
  }

  function peg$parseValueExpression(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseTestExpression();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseLogicalOperator();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseTestExpression();
        if (s5 as any !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseLogicalOperator();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseTestExpression();
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c64(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseArgumentExpression(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 44) {
      s1 = peg$c87;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c88); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseValueExpression();
      if (s2 as any !== peg$FAILED) {
        s0 = s2;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePrefixArgumentExpression(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseValueExpression();
    if (s1 as any !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c87;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c88); }
      }
      if (s2 as any !== peg$FAILED) {
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExtraArguments(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseArgumentExpression();
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseArgumentExpression();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEmptyStatement(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseSourceCharacter();
    peg$silentFails--;
    if (s2 as any === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c89();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseValueStatement(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseValueExpression();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c90(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAssignment(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseValueExpression();
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c91) {
        s2 = peg$c91;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c92); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseAssignable();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c93(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIfStatement(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c94) {
      s1 = peg$c94;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c95); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseValueExpression();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseExtraCharacters();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c96(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseThen(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c97) {
      s1 = peg$c97;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c98); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseExtraCharacters();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c99(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseElse(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c100) {
      s1 = peg$c100;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c101); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseExtraCharacters();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c102(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFor(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c103) {
      s1 = peg$c103;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c104); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseVariable();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseArgumentExpression();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseArgumentExpression();
          if (s4 as any === peg$FAILED) {
            s4 = null;
          }
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseArgumentExpression();
            if (s5 as any === peg$FAILED) {
              s5 = null;
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parseExtraArguments();
              if (s6 as any === peg$FAILED) {
                s6 = null;
              }
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseOptionalEndParen();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parseExtraCharacters();
                  if (s8 as any === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 as any !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c105(s2, s3, s4, s5, s6, s8);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWhile(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c106) {
      s1 = peg$c106;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c107); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseValueExpression();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseExtraCharacters();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c108(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRepeat(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c109) {
      s1 = peg$c109;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c110); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseValueExpression();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseExtraCharacters();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c111(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEnd(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c112) {
      s1 = peg$c112;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c113); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseExtraCharacters();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c114(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePause(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c115) {
      s1 = peg$c115;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c116); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c117();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLabel(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c118) {
      s1 = peg$c118;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c119); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseLocation();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c120(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGoto(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c121) {
      s1 = peg$c121;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c122); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseLocation();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c123(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIncrementSkip(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c124) {
      s1 = peg$c124;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c125); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseVariable();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseArgumentExpression();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseOptionalEndParen();
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c126(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDecrementSkip(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c127) {
      s1 = peg$c127;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c128); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseVariable();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseArgumentExpression();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseOptionalEndParen();
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c129(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMenu(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c130) {
      s1 = peg$c130;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c131); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseValueExpression();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c87;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c88); }
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parseStringLiteral();
          if (s6 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c87;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c88); }
            }
            if (s7 as any !== peg$FAILED) {
              s8 = peg$parseLocation();
              if (s8 as any !== peg$FAILED) {
                s5 = [s5, s6, s7, s8];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c87;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c88); }
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parseStringLiteral();
            if (s6 as any !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c87;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c88); }
              }
              if (s7 as any !== peg$FAILED) {
                s8 = peg$parseLocation();
                if (s8 as any !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseOptionalEndParen();
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c132(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseProgram(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c133) {
      s1 = peg$c133;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c134); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseProgramName();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c135(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseReturn(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c136) {
      s1 = peg$c136;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c137); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c138();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseStop(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c139) {
      s1 = peg$c139;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c140); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c141();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDelVar(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c142) {
      s1 = peg$c142;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c143); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseVariable();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c144(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGraphStyle(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c145) {
      s1 = peg$c145;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c146); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseValueExpression();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseArgumentExpression();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseOptionalEndParen();
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c147(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOpenLib(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c148) {
      s1 = peg$c148;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c149); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseProgramName();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseOptionalEndParen();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c150(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExecLib(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c151) {
      s1 = peg$c151;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c152); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseProgramName();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseOptionalEndParen();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c153(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCtlStatement(): any {
    let s0;

    s0 = peg$parseIfStatement();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseThen();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseElse();
        if (s0 as any === peg$FAILED) {
          s0 = peg$parseFor();
          if (s0 as any === peg$FAILED) {
            s0 = peg$parseWhile();
            if (s0 as any === peg$FAILED) {
              s0 = peg$parseRepeat();
              if (s0 as any === peg$FAILED) {
                s0 = peg$parseEnd();
                if (s0 as any === peg$FAILED) {
                  s0 = peg$parsePause();
                  if (s0 as any === peg$FAILED) {
                    s0 = peg$parseLabel();
                    if (s0 as any === peg$FAILED) {
                      s0 = peg$parseGoto();
                      if (s0 as any === peg$FAILED) {
                        s0 = peg$parseIncrementSkip();
                        if (s0 as any === peg$FAILED) {
                          s0 = peg$parseDecrementSkip();
                          if (s0 as any === peg$FAILED) {
                            s0 = peg$parseMenu();
                            if (s0 as any === peg$FAILED) {
                              s0 = peg$parseProgram();
                              if (s0 as any === peg$FAILED) {
                                s0 = peg$parseReturn();
                                if (s0 as any === peg$FAILED) {
                                  s0 = peg$parseStop();
                                  if (s0 as any === peg$FAILED) {
                                    s0 = peg$parseDelVar();
                                    if (s0 as any === peg$FAILED) {
                                      s0 = peg$parseGraphStyle();
                                      if (s0 as any === peg$FAILED) {
                                        s0 = peg$parseOpenLib();
                                        if (s0 as any === peg$FAILED) {
                                          s0 = peg$parseExecLib();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseInput(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c154) {
      s1 = peg$c154;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c155); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsePrefixArgumentExpression();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseVariable();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c156(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePrompt(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c157) {
      s1 = peg$c157;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c158); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseVariable();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c159(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDisplay(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c160) {
      s1 = peg$c160;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c161); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseValueExpression();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c162(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDispGraph(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c163) {
      s1 = peg$c163;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c164); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c165();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDispTable(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c166) {
      s1 = peg$c166;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c167); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c168();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOutput(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c169) {
      s1 = peg$c169;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c170); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseValueExpression();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseArgumentExpression();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseArgumentExpression();
          if (s4 as any === peg$FAILED) {
            s4 = null;
          }
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseOptionalEndParen();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c171(s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseClrHome(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c172) {
      s1 = peg$c172;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c173); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c174();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseClrTable(): any {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c175) {
      s1 = peg$c175;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c176); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c177();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseGetCalc(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c178) {
      s1 = peg$c178;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c179); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseVariable();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseArgumentExpression();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseOptionalEndParen();
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c180(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGet(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c181) {
      s1 = peg$c181;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c182); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseVariable();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseOptionalEndParen();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c183(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSend(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c184) {
      s1 = peg$c184;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c185); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseVariable();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseOptionalEndParen();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c186(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIoStatement(): any {
    let s0;

    s0 = peg$parseInput();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsePrompt();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseDisplay();
        if (s0 as any === peg$FAILED) {
          s0 = peg$parseDispGraph();
          if (s0 as any === peg$FAILED) {
            s0 = peg$parseDispTable();
            if (s0 as any === peg$FAILED) {
              s0 = peg$parseOutput();
              if (s0 as any === peg$FAILED) {
                s0 = peg$parseClrHome();
                if (s0 as any === peg$FAILED) {
                  s0 = peg$parseClrTable();
                  if (s0 as any === peg$FAILED) {
                    s0 = peg$parseGetCalc();
                    if (s0 as any === peg$FAILED) {
                      s0 = peg$parseGet();
                      if (s0 as any === peg$FAILED) {
                        s0 = peg$parseSend();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseStatement(): any {
    let s0;

    s0 = peg$parseEmptyStatement();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseAssignment();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseCtlStatement();
        if (s0 as any === peg$FAILED) {
          s0 = peg$parseIoStatement();
          if (s0 as any === peg$FAILED) {
            s0 = peg$parseValueStatement();
          }
        }
      }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export interface IParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: IParseOptions) => any;
export const parse: ParseFunction = peg$parse;

